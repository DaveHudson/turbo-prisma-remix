## TODO: Using Dockerfile as a base, convert this one to work and do prod build without the crap in the directory

# ? Inspect with: docker run -it sha256:df8455895ec6c1862788e69020efc8b47a72922e9cdc40c9559ebfdf403824eb sh

# base node image
FROM node:16-bullseye-slim as base

# Install openssl for Prisma & git for Turbo repo 
RUN apt-get update && apt-get install -y openssl && apt-get install -y git

# Install all root node_modules, including dev dependencies
FROM base as deps

# Create an app directory and set as the cwd
RUN mkdir /app
WORKDIR /app

# Copy package.json file to root
COPY package.json ./

# Install root deps
# turbo etc
RUN npm install --production=false

# -----------------------------------------------
# Setup production node_modules
FROM base as production-deps

RUN mkdir /app
WORKDIR /app

COPY --from=deps /app/node_modules /app/node_modules
ADD package.json  ./
RUN npm prune --production

# -----------------------------------------------

# Build the app
FROM base as build

ENV NODE_ENV=production

RUN mkdir /app
WORKDIR /app

COPY --from=deps /app/node_modules /app/node_modules

# If we're using Prisma, uncomment to cache the prisma schema
ADD prisma .
RUN npx prisma generate

ADD . .

# build all apps
RUN npm run build
# RUN turbo run build --scope=blog --include-dependencies --no-deps

# -----------------------------------------------

# Finally, build the production image with minimal footprint
FROM base

ENV NODE_ENV=production

RUN mkdir /app
WORKDIR /app

COPY --from=production-deps /app/node_modules /app/node_modules

# Uncomment if using Prisma
# COPY --from=build /app/node_modules/.prisma /app/node_modules/.prisma

COPY --from=build /app/build /app/build
COPY --from=build /app/public /app/public
ADD . .

CMD ["npm", "run", "start"]
